package org.springframework.data.redis.connection;import static org.assertj.core.api.Assertions.assertThat;import static org.junit.jupiter.api.Assertions.assertThrows;import org.junit.jupiter.api.Test;/** * Unit tests for {@link RedisNode}. * I referenced the test code from ConversionUnitTests.java * * @author LeeHyungGeol */public class RedisNodeUnitTests {    private static final int DEFAULT_PORT = 6379;    @Test // IPv4 Address with port    void shouldParseIPv4AddressWithPort() {        RedisNode node = RedisNode.fromString("127.0.0.1:6379");        assertThat(node.getHost()).isEqualTo("127.0.0.1");        assertThat(node.getPort()).isEqualTo(6379);    }    @Test // IPv6 Address with port    void shouldParseIPv6AddressWithPort() {        RedisNode node = RedisNode.fromString("[aaaa:bbbb::dddd:eeee]:6379");        assertThat(node.getHost()).isEqualTo("aaaa:bbbb::dddd:eeee");        assertThat(node.getPort()).isEqualTo(6379);    }    @Test // Bare hostname with port    void shouldParseBareHostnameWithPort() {        RedisNode node = RedisNode.fromString("my.redis.server:6379");        assertThat(node.getHost()).isEqualTo("my.redis.server");        assertThat(node.getPort()).isEqualTo(6379);    }    @Test // Invalid port parsing    void shouldThrowExceptionForInvalidPort() {        assertThrows(IllegalArgumentException.class, () -> {            RedisNode node = RedisNode.fromString("127.0.0.1:invalidPort");        });    }    @Test // Bare IPv6 address (no square brackets)    void shouldParseBareIPv6WithoutPort() {        RedisNode node = RedisNode.fromString("2001:0db8:85a3:0000:0000:8a2e:0370:7334");        assertThat(node.getHost()).isEqualTo("2001:0db8:85a3:0000:0000:8a2e:0370");        assertThat(node.getPort()).isEqualTo(7334);    }    @Test // Bare hostname without port    void shouldParseBareHostnameWithoutPort() {        RedisNode node = RedisNode.fromString("my.redis.server");        assertThat(node.getHost()).isEqualTo("my.redis.server");        assertThat(node.getPort()).isEqualTo(DEFAULT_PORT);    }}